=========================================
PostgreSQL specific aggregation functions
=========================================

.. module:: django.contrib.postgres.aggregates
   :synopsis: PosgreSQL specific aggregation functions

All of these functions are available
from the ``django.contrib.postgres.aggregates``.

.. warning::

    All functions come without default aliases,
    so you must explicitly provide it.
    Usage example::

        >> result = SomeModel.objects.aggregate(arr=ArrayAgg('somefield'))
        >> print(result)
        {'arr': [0, 1, 2]}


General-purpose aggregation functions
-------------------------------------

ArrayAgg
~~~~~~~~

.. class:: ArrayAgg(expression, **extra)

    Returns input values, including nulls, concatenated into an array.

    * Return type: ``list``

BitAnd
~~~~~~

.. class:: BitAnd(expression, **extra)

    Returns the bitwise ``AND`` of all non-null input values, or ``NULL`` if none.

    * Return type: ``int`` or ``None``

BitOr
~~~~~

.. class:: BitOr(expression, **extra)

    Returns the bitwise ``OR`` of all non-null input values, or ``NULL`` if none.

    * Return type: ``int`` or ``None``

BoolAnd
~~~~~~~~

.. class:: BoolAnd(expression, **extra)

    Returns ``True``, if all input values are true, otherwise ``False``.

    * Return type: ``bool`` or ``None``

BoolOr
~~~~~~

.. class:: BoolOr(expression, **extra)

    Returns ``True`` if at least one input value is true, otherwise ``False``.

    * Return type: ``bool`` or ``None``


StringAgg
~~~~~~~~~

.. class:: String(expression, delimiter)

    Returns input values concatenated into a string, separated by delimiter.

    * Return type: ``str`` or ``None``

    .. attribute:: delimiter

        Required argument. Need to be a string. Examples: ``:``, ``;``.


Aggregate functions for statistics
----------------------------------

``y`` and ``x``
~~~~~~~~~~~~~~~

Both of ``y`` and ``x`` can be a string with field name or an expression
returning a numeric data, and both must to be provided.


Corr
~~~~

.. class:: Corr(y, x)

    Returns correlation coefficient.

    * Return type: ``float`` or ``None``

CovarPop
~~~~~~~~

.. class:: CovarPop(y, x, sample=False)

    Returns population covariance.

    * Return type: ``float`` or ``None``

    Has one optional argument:

    .. attribute:: sample

        By default, ``CovarPop`` returns the general population covariance. However,
        if ``sample=True``, the return value will be the sample population covariance.

RegrAvgX
~~~~~~~~

.. class:: RegrAvgX(y, x)

    Returns average of the independent variable (``sum(x)/N``).

    * Return type: ``float`` or ``None``

RegrAvgY
~~~~~~~~

.. class:: RegrAvgY(y, x)

    Returns average of the independent variable (``sum(y)/N``).

    * Return type: ``float`` or ``None``

RegrCount
~~~~~~~~~

.. class:: RegrCount(y, x)

    Returns number of input rows in which both expressions are not null.

    * Return type: ``int``

RegrIntercept
~~~~~~~~~~~~~

.. class:: RegrIntercept(y, x)

    Returns y-intercept of the least-squares-fit linear equation determined
    by the ``(x, y)`` pairs.

    * Return type: ``float`` or ``None``

RegrR2
~~~~~~

.. class:: RegrR2(y, x)

    Returns square of the correlation coefficient.

    * Return type: ``float`` or ``None``

RegrSlope
~~~~~~~~~

.. class:: RegrSlope(y, x)

    Returns slope of the least-squares-fit linear equation determined
    by the ``(x, y)`` pairs.

    * Return type: ``float`` or ``None``

RegrSXX
~~~~~~~

.. class:: RegrSXX(y, x)

    Returns ``sum(x^2) - sum(x)^2/N`` ("sum of squares" of the independent variable).

    * Return type: ``float`` or ``None``

RegrSXY
~~~~~~~

.. class:: RegrSXY(y, x)

    Returns ``sum(x*y) - sum(x) * sum(y)/N`` ("sum of products" of independent
    times dependent variable).

    * Return type: ``float`` or ``None``

RegrSYY
~~~~~~~

.. class:: RegrSYY(y, x)

    Returns ``sum(y^2) - sum(y)^2/N`` ("sum of squares" of the dependent variable).

    * Return type: ``float`` or ``None``


Usage examples
--------------

We will use this example table::

    | FIELD1 | FIELD2 | FIELD3 |
    |--------|--------|--------|
    |    foo |      1 |     13 |
    |    bar |      2 | (null) |
    |   test |      3 |     13 |


Usage of some general-purpose aggregation functions::

    >> TestModel.objects.aggregate(result=StringAgg('field1', delimiter=';'))
    {'result': 'foo;bar;test'}
    >> TestModel.objects.aggregate(result=ArrayAgg('field2'))
    {'result': [1, 2, 3]}
    >> TestModel.objects.aggregate(result=ArrayAgg('field1'))
    {'result': ['foo', 'bar', 'test']}

Next example is about usage of statistics aggregation functions.
Underlying math will be not described (you can read about this,
for example, at `wikipedia page <http://en.wikipedia.org/wiki/Regression_analysis>`_)::

    >> TestModel.objects.aggregate(count=RegrCount(y='field3', x='field2'))
    {'count': 2}
    >> TestModel.objects.aggregate(
    avgx=RegrAvgX(y='field3', x='field2'), avgy=RegrAvgY(y='field3', x='field2')
    )
    {'avgx': 2, 'avgy': 13}
